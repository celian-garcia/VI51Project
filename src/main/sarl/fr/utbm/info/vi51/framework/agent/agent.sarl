package fr.utbm.info.vi51.framework.^agent

import fr.utbm.info.vi51.framework.environment.DynamicType
import fr.utbm.info.vi51.framework.environment.Percept
import fr.utbm.info.vi51.framework.environment.StopSimulation
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import java.util.UUID
import fr.utbm.info.vi51.framework.math.Point2f
import fr.utbm.info.vi51.framework.math.Vector2f
import fr.utbm.info.vi51.framework.math.Rectangle2f
import fr.utbm.info.vi51.marines.formation.Formation
import java.util.List

agent AbstractAnimat {
	
	uses PhysicEnvironment, Lifecycle
	
	var behaviorType : DynamicType
	
	on Initialize {
		var physicSkill = new StandardPhysicEnvironment(
			occurrence.parameters.get(0) as UUID,
			occurrence.parameters.get(1) as UUID)
		this.behaviorType = occurrence.parameters.get(2) as DynamicType
		setSkill(PhysicEnvironment, physicSkill)
	}
	
	def getMaxLinear(p : Percept) : float {
		if (this.behaviorType == DynamicType::STEERING) p.maxLinearAcceleration else p.maxLinearSpeed
	}
	
	def getMaxAngular(p : Percept) : float {
		if (this.behaviorType == DynamicType::STEERING) p.maxAngularAcceleration else p.maxAngularSpeed
	}

	def emitInfluence(output : BehaviourOutput) {
		if (output !== null) {
			if (output.getType() === DynamicType::STEERING)
				influenceSteering(output.linear, output.angular)
			else
				influenceKinematic(output.linear, output.angular);
		}
	}
	
	on StopSimulation {
		killMe
	}
	
	def repulsiveVector(obj:Point2f, me:Point2f, s:float):Vector2f {
		var v = new Vector2f
		v.sub(me, obj)
		var dist = v.length
		v.normalize

		v.scale((s*s*s)/(dist*dist*dist))
		return v
	}
	
	def computeDistanceMin(obj:Point2f, objb:Rectangle2f, me:Point2f, meb:Rectangle2f): float {
		var objr = (objb.upper.x - objb.lower.x)/2;
		var mer  = (meb.upper.x - meb.lower.x)/2;
		
		return objr + mer;
	}

}

agent AbstractOrganized extends AbstractAnimat {
	/**
	 * The own formation
	 */
	var ownFormation : Formation
	
	/**
	 * The own master formation
	 */
	var ownMasterFormation : Formation
	
	/**
	 * The followed formation
	 */
	var followedFormation : Formation
	
	on Initialize {
		super._handle_Initialize_0(occurrence)
		
		this.ownFormation = null as Formation
		this.ownMasterFormation = null as Formation
		this.followedFormation = null as Formation
	}
	
	def initializeFollowedFormation (formations : List<Object>) : int {
		var i = 0
		var index = -1
		var formation = null as Formation
		
		// Search for a formation he can integrate 
		while(index == -1 && i < formations.length) {
			formation = formations.get(i++) as Formation
			index = formation.allocate(false)
		}
		
		if(index != -1) {
			this.followedFormation = formation;
		}
		
		return index 
	}
	
	def initializeOwnFormation (formations : List<Object>) {
		var i = 0
		var found = false
		var formation = null as Formation
		
		while(!found && i < formations.length) {
			formation = formations.get(i++) as Formation
			if (!formation.haveLeader) {
				found = true
			}
		}
		
		if (found) {
			this.ownFormation = formation
		}
	}
	
	def initializeOwnFormation (formation : Object) {
		this.ownFormation = formation as Formation
	}
	
	def initializeOwnMasterFormation (formations : List<Object>) {
		var i = 0
		var found = false
		var formation = null as Formation
		
		while(!found && i < formations.length) {
			formation = formations.get(i++) as Formation
			if (!formation.haveLeader) {
				found = true
			}
		}
		
		if (found) {
			this.ownMasterFormation = formation
		}
	}
	
	def initializeOwnMasterFormation (formation : Object) {
		this.ownMasterFormation = formation as Formation
	}
	
	def updateFollowedFormation (formations : List<Formation>) : int {
		var index = -1;
		if (!formations.empty) {
			if (formations.get(0) != null) {
				this.followedFormation = formations.get(0)
				index = this.followedFormation.allocate(false)
			}
		}
		return index
	}
	
	def updateOwnFormation (formation : Formation) {
		//TODO : 
	}
	
	def updateOwnMasterFormation (formations : List<Formation>) {
		if (!formations.empty)
			if (formations.get(0) != null)
				this.ownMasterFormation = formations.get(0)
	}
}