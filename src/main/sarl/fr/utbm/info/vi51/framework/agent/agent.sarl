package fr.utbm.info.vi51.framework.^agent

import fr.utbm.info.vi51.framework.environment.DynamicType
import fr.utbm.info.vi51.framework.environment.Percept
import fr.utbm.info.vi51.framework.environment.StopSimulation
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import java.util.UUID
import fr.utbm.info.vi51.framework.math.Point2f
import fr.utbm.info.vi51.framework.math.Vector2f

agent AbstractAnimat {
	
	uses PhysicEnvironment, Lifecycle
	
	var behaviorType : DynamicType
	
	on Initialize {
		var physicSkill = new StandardPhysicEnvironment(
			occurrence.parameters.get(0) as UUID,
			occurrence.parameters.get(1) as UUID)
		this.behaviorType = occurrence.parameters.get(2) as DynamicType
		setSkill(PhysicEnvironment, physicSkill)
	}
	
	def getMaxLinear(p : Percept) : float {
		if (this.behaviorType == DynamicType::STEERING) p.maxLinearAcceleration else p.maxLinearSpeed
	}
	
	def getMaxAngular(p : Percept) : float {
		if (this.behaviorType == DynamicType::STEERING) p.maxAngularAcceleration else p.maxAngularSpeed
	}

	def emitInfluence(output : BehaviourOutput) {
		if (output !== null) {
			if (output.getType() === DynamicType::STEERING)
				influenceSteering(output.linear, output.angular)
			else
				influenceKinematic(output.linear, output.angular);
		}
	}
	
	on StopSimulation {
		killMe
	}

}