/**
 * 
 */
package fr.utbm.info.vi51.marines.^agent

import fr.utbm.info.vi51.framework.^agent.PhysicEnvironment
import fr.utbm.info.vi51.framework.environment.PerceptionEvent
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import fr.utbm.info.vi51.marines.formation.Formation

/**
 * @author celian
 *
 */

agent LeaderChief extends Leader {
	
	uses PhysicEnvironment, Lifecycle, DefaultContextInteractions
	
	var chiefFormation : Formation
	
	on Initialize {
		super._handle_Initialize_0(occurrence)
		this.chiefFormation = occurrence.parameters.get(5) as Formation
	}

	
	on PerceptionEvent [ occurrence.perceptions.empty ] {
		// Adopt a leader behaviour
		super._handle_PerceptionEvent_1(occurrence)
		
		// But also a MasterChief behaviour
		this.chiefFormation.globalPosition = occurrence.body.position
		this.chiefFormation.globalOrientation = occurrence.body.direction
		
		this.wanderBehaviour.runWander(
			occurrence.body.position,
			occurrence.body.direction,
			occurrence.body.currentLinearSpeed,
			occurrence.body.maxLinear,
			occurrence.body.currentAngularSpeed,
			occurrence.body.maxAngular
		).emitInfluence
	}
	
	
	on PerceptionEvent [ !occurrence.perceptions.empty ] {
		// Adopt a leader behaviour
		super._handle_PerceptionEvent_1(occurrence)
		
		// But also a MasterChief behaviour
		this.chiefFormation.globalPosition = occurrence.body.position
		this.chiefFormation.globalOrientation = occurrence.body.direction
		
		var firstPercept = occurrence.perceptions.get(0)

		// Follow the target
		if (firstPercept.type == "TARGET") {
			var target = firstPercept.position.clone

			// run the seek behaviour
			var bo1 = this.seekBehaviour.runSeek(
				occurrence.body.position,
				occurrence.body.currentLinearSpeed,
				occurrence.body.maxLinear,
				target
			)
			
			var v = bo1.linear
			v.normalize

			for (obj:occurrence.perceptions) {
				if (obj.type == "ROCK") {

					var dmin = computeDistanceMin(
						obj.position, obj.shape.bounds,
						occurrence.body.position,
						occurrence.body.shape.bounds
					)

					var rv = obj.position.repulsiveVector(occurrence.body.position, dmin)
					v.add(rv)
				}
			}

			v.normalize
			v.scale(occurrence.body.maxLinear)
			bo1.linear = v
			bo1.emitInfluence
		}
		else {
			// run the wander behaviour
			this.wanderBehaviour.runWander(
				occurrence.body.position,
				occurrence.body.direction,
				occurrence.body.currentLinearSpeed,
				occurrence.body.maxLinear,
				occurrence.body.currentAngularSpeed,
				occurrence.body.maxAngular
			).emitInfluence
		}
	}
	
}