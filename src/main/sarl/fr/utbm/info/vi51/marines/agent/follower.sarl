package fr.utbm.info.vi51.marines.^agent

import fr.utbm.info.vi51.framework.^agent.PhysicEnvironment
import fr.utbm.info.vi51.framework.environment.DynamicType
import fr.utbm.info.vi51.framework.environment.PerceptionEvent
import fr.utbm.info.vi51.framework.environment.SimulationAgentReady
import fr.utbm.info.vi51.framework.math.MathUtil
import fr.utbm.info.vi51.marines.^behavior.AlignBehaviour
import fr.utbm.info.vi51.marines.^behavior.SeekBehaviour
import fr.utbm.info.vi51.marines.^behavior.WanderBehaviour
import fr.utbm.info.vi51.marines.^behavior.kinematic.KinematicAlignBehaviour
import fr.utbm.info.vi51.marines.^behavior.kinematic.KinematicSeekBehaviour
import fr.utbm.info.vi51.marines.^behavior.kinematic.KinematicWanderBehaviour
import fr.utbm.info.vi51.marines.^behavior.steering.SteeringAlignBehaviour
import fr.utbm.info.vi51.marines.^behavior.steering.SteeringFaceBehaviour
import fr.utbm.info.vi51.marines.^behavior.steering.SteeringSeekBehaviour
import fr.utbm.info.vi51.marines.^behavior.steering.SteeringWanderBehaviour
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import fr.utbm.info.vi51.framework.^agent.AbstractOrganized
import fr.utbm.info.vi51.marines.formation.FormationSlot

agent Follower extends AbstractOrganized {
	
	uses PhysicEnvironment, Lifecycle, DefaultContextInteractions
	
	var slot : FormationSlot
	var seekBehaviour : SeekBehaviour
	var alignBehaviour : AlignBehaviour
	var wanderBehaviour : WanderBehaviour
	
	val STOP_DISTANCE = 3f
	val STOP_RADIUS = MathUtil.PI/10f
	val SLOW_RADIUS = MathUtil.PI/4f
	val WANDER_CIRCLE_DISTANCE = 20f
	val WANDER_CIRCLE_RADIUS = 10f
	val WANDER_MAX_ROTATION = MathUtil.PI/4f
	
	
	on Initialize {
		super._handle_Initialize_0(occurrence)
		
		// Leader formations are given from 4 to the end of parameters 
		var start = 4
		var end = occurrence.parameters.length
		var index = this.initializeFollowedFormation(occurrence.parameters.subList(start, end))
		this.slot = this.followedFormation.getSlotAt(index)
		
		if (this.behaviorType == DynamicType::STEERING) {
			this.seekBehaviour = new SteeringSeekBehaviour
			var alignB = new SteeringAlignBehaviour(STOP_RADIUS, SLOW_RADIUS)
			var faceB = new SteeringFaceBehaviour(STOP_DISTANCE, alignB)
			this.alignBehaviour = alignB
			this.wanderBehaviour = new SteeringWanderBehaviour(
					WANDER_CIRCLE_DISTANCE, 
					WANDER_CIRCLE_RADIUS, 
					WANDER_MAX_ROTATION,
					faceB)
		}
		else {
			this.seekBehaviour =  new KinematicSeekBehaviour
			this.alignBehaviour = new KinematicAlignBehaviour(STOP_RADIUS)
			this.wanderBehaviour = new KinematicWanderBehaviour
		} 
		emit(new SimulationAgentReady)
	}
	
	on PerceptionEvent {
		// No formation slot found
		if (this.slot === null) {
			this.wanderBehaviour.runWander(
				occurrence.body.position,
				occurrence.body.direction,
				occurrence.body.currentLinearSpeed,
				occurrence.body.maxLinear,
				occurrence.body.currentAngularSpeed,
				occurrence.body.maxAngular
			).emitInfluence			
		}
		// else follower follow the formation slot
		else {
			var position = this.slot.globalPosition
			var bo1 = this.seekBehaviour.runSeek(
				occurrence.body.position,
				occurrence.body.currentLinearSpeed,
				occurrence.body.maxLinear,
				position)
			
			var v = bo1.linear 
			v.normalize
			
			for (obj:occurrence.perceptions) {
				if (obj.type == "ROCK") {

					var dmin = computeDistanceMin(
						obj.position, obj.shape.bounds,
						occurrence.body.position,
						occurrence.body.shape.bounds
					)

					var rv = obj.position.repulsiveVector(occurrence.body.position, dmin)
					v.add(rv)
				}
			}
			
			v.normalize
			v.scale(occurrence.body.maxLinear)
			bo1.linear = v
			
			var orientation = this.slot.globalOrientation
			bo1.angular = this.alignBehaviour.runAlign(
				occurrence.body.direction,
				occurrence.body.currentAngularSpeed,
				occurrence.body.maxAngular,
				orientation)
				
			bo1.emitInfluence
		}
	}
	
	

}