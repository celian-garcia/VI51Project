/**
 * 
 */
package fr.utbm.info.vi51.marines.^agent

import fr.utbm.info.vi51.framework.^agent.PhysicEnvironment
import fr.utbm.info.vi51.framework.environment.PerceptionEvent
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import java.util.ArrayList
import fr.utbm.info.vi51.framework.environment.SimulationAgentReady
import fr.utbm.info.vi51.marines.formation.FormationSlot
import fr.utbm.info.vi51.marines.^agent.AbstractCommander
import fr.utbm.info.vi51.framework.math.Vector2f

/**
 * @author celian
 *
 */

agent Leader extends AbstractCommander {
	
	uses PhysicEnvironment, Lifecycle, DefaultContextInteractions
	
	var slot : FormationSlot
	
	on Initialize {
		
		super._handle_Initialize_0(occurrence)
		
		// There is only one master formation to follow for the leader
		// The index returned correspond to his place in the master formation
		var list = new ArrayList<Object>();
		list.add(occurrence.parameters.get(3)) 
		var index = this.initializeFollowedFormation(list)
		this.slot = this.followedFormation.getSlotAt(index)
		
		this.initializeOwnFormation (occurrence.parameters.get(4 + index))
		
		emit(new SimulationAgentReady)
	}

	on PerceptionEvent {
		
		var index = this.updateFollowedFormation(occurrence.formations)
		if (index != -1) this.slot = this.followedFormation.getSlotAt(index)
		
		this.ownFormation.globalPosition = occurrence.body.position
		this.ownFormation.globalOrientation = occurrence.body.direction	
	
		// But also a follower behavior
		if (this.slot === null) {
			this.wanderBehaviour.runWander(
				occurrence.body.position,
				occurrence.body.direction,
				occurrence.body.currentLinearSpeed,
				occurrence.body.maxLinear,
				occurrence.body.currentAngularSpeed,
				occurrence.body.maxAngular
			).emitInfluence			
		} else {
			var target = this.slot.globalPosition
			var bo1 = this.seekBehaviour.runSeek(
				occurrence.body.position,
				occurrence.body.currentLinearSpeed,
				occurrence.body.maxLinear,
				target)
			
			var v = bo1.linear 
			v.normalize
			
			for (obj:occurrence.perceptions) {
				if (obj.type == "ROCK") {

					var dmin = computeDistanceMin(
						obj.position, obj.shape.bounds,
						occurrence.body.position,
						occurrence.body.shape.bounds
					)

					var rv = obj.position.repulsiveVector(occurrence.body.position, dmin)
					v.add(rv)
				}
			}
			
			v.normalize
			v.scale(occurrence.body.maxLinear)
			bo1.linear = v
			
			
			var direction = new Vector2f()
			direction.sub(occurrence.body.position, target) 
			
			if (direction.length  < 5.0f) {
				var orientation = this.slot.globalOrientation
				bo1.angular = this.alignBehaviour.runAlign(
				occurrence.body.direction,
				occurrence.body.currentAngularSpeed,
				occurrence.body.maxAngular,
				orientation)
			}
			else {
				bo1.angular = this.alignBehaviour.runAlign(
				occurrence.body.direction,
				occurrence.body.currentAngularSpeed,
				occurrence.body.maxAngular,
				direction)
			}
			
				
			bo1.emitInfluence
		}
	}
		
}